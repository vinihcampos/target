#ifndef _MATRIX4X4_
#define _MATRIX4X4_

#include <memory>

namespace target{
	
	class Matrix4x4{
		private:
			double m[4][4];

		public:

			Matrix4x4(double m_[4][4]){
				for (int i = 0; i < 4; ++i)
					for (int j = 0; j < 4; ++j)
						m[i][j] = m_[i][j];
			}
			
			Matrix4x4(const double & a00 = 0.0, const double & a01 = 0.0, const double & a02 = 0.0, const double & a03 = 0.0,
					  const double & a10 = 0.0, const double & a11 = 0.0, const double & a12 = 0.0, const double & a13 = 0.0,
					  const double & a20 = 0.0, const double & a21 = 0.0, const double & a22 = 0.0, const double & a23 = 0.0,
					  const double & a30 = 0.0, const double & a31 = 0.0, const double & a32 = 0.0, const double & a33 = 0.0){

				m[0][0] = a00; m[0][1] = a01; m[0][2] = a02; m[0][3] = a03;
				m[1][0] = a10; m[1][1] = a11; m[1][2] = a12; m[1][3] = a13;
				m[2][0] = a20; m[2][1] = a21; m[2][2] = a22; m[2][3] = a23;
				m[3][0] = a30; m[3][1] = a31; m[3][2] = a32; m[3][3] = a33;
			}

			inline double * operator[](int i){ return m[i]; }
			inline const double * operator[](int i) const { return m[i]; }

			inline bool operator==(const Matrix4x4& m_) const { 
				for (int i = 0; i < 4; ++i)
					for (int j = 0; j < 4; ++j)
						if(m[i][j] != m_[i][j]) return false;
				return true;
			}

			inline bool operator!=(const Matrix4x4& m_) const { 
				return !(*this == m_);

				for (int i = 0; i < 4; ++i)
					for (int j = 0; j < 4; ++j)
						if(m[i][j] != m_[i][j]) return false;
				return true;
			}

			inline Matrix4x4 T(){
				return Matrix4x4(m[0][0], m[1][0], m[2][0],m[3][0],
								 m[0][1], m[1][1], m[2][1],m[3][1],
								 m[0][2], m[1][2], m[2][2],m[3][2],
								 m[0][3], m[1][3], m[2][3],m[3][3]);
			}

			inline Matrix4x4 operator*(const Matrix4x4& m_){
				Matrix4x4 r;

				for (int i = 0; i < 4; ++i) 
					for (int j = 0; j < 4; ++j)
						r[i][j] = m[i][0] * m_[0][j] +
								  m[i][1] * m_[1][j] +
								  m[i][2] * m_[2][j] +
								  m[i][3] * m_[3][j];
				return r;
			}

			inline Matrix4x4 operator*(const double & v){
				Matrix4x4 r(m);

				for (int i = 0; i < 4; ++i) 
					for (int j = 0; j < 4; ++j)
						r[i][j] *= v; 
				return r;
			}

			inline Matrix4x4 operator-(){
				return inv();
			}

			inline double det(){
				return m[0][0]*m[1][1]*m[2][2]*m[3][3] + m[0][0]*m[1][2]*m[2][3]*m[3][1] + m[0][0]*m[1][3]*m[2][1]*m[3][2]
				     - m[0][0]*m[1][3]*m[2][2]*m[3][1] - m[0][0]*m[1][2]*m[2][1]*m[3][3] - m[0][0]*m[1][1]*m[2][3]*m[3][2]
				     - m[0][1]*m[1][0]*m[2][2]*m[3][3] - m[0][2]*m[1][0]*m[2][3]*m[3][1] - m[0][3]*m[1][0]*m[2][1]*m[3][2]
				     + m[0][3]*m[1][0]*m[2][2]*m[3][1] + m[0][2]*m[1][0]*m[2][1]*m[3][3] + m[0][1]*m[1][0]*m[2][3]*m[3][2]
				     + m[0][1]*m[1][2]*m[2][0]*m[3][3] + m[0][2]*m[1][3]*m[2][0]*m[3][1] + m[0][3]*m[1][1]*m[2][0]*m[3][2]
				     - m[0][3]*m[1][2]*m[2][0]*m[3][1] - m[0][2]*m[1][1]*m[2][0]*m[3][3] - m[0][1]*m[1][3]*m[2][0]*m[3][2]
				     - m[0][1]*m[1][2]*m[2][3]*m[3][0] - m[0][2]*m[1][3]*m[2][1]*m[3][0] - m[0][3]*m[1][1]*m[2][2]*m[3][0]
				     + m[0][3]*m[1][2]*m[2][1]*m[3][0] + m[0][2]*m[1][1]*m[2][3]*m[3][0] + m[0][1]*m[1][3]*m[2][2]*m[3][0];
			}

			inline Matrix4x4 inv(){
				Matrix4x4 r;

				r[0][0] = m[1][2]*m[2][3]*m[3][1] - m[1][3]*m[2][2]*m[3][1] + m[1][3]*m[2][1]*m[3][2] - m[1][1]*m[2][3]*m[3][2] - m[1][2]*m[2][1]*m[3][3] + m[1][1]*m[2][2]*m[3][3];
   				r[0][1] = m[0][3]*m[2][2]*m[3][1] - m[0][2]*m[2][3]*m[3][1] - m[0][3]*m[2][1]*m[3][2] + m[0][1]*m[2][3]*m[3][2] + m[0][2]*m[2][1]*m[3][3] - m[0][1]*m[2][2]*m[3][3];
   				r[0][2] = m[0][2]*m[1][3]*m[3][1] - m[0][3]*m[1][2]*m[3][1] + m[0][3]*m[1][1]*m[3][2] - m[0][1]*m[1][3]*m[3][2] - m[0][2]*m[1][1]*m[3][3] + m[0][1]*m[1][2]*m[3][3];
   				r[0][3] = m[0][3]*m[1][2]*m[2][1] - m[0][2]*m[1][3]*m[2][1] - m[0][3]*m[1][1]*m[2][2] + m[0][1]*m[1][3]*m[2][2] + m[0][2]*m[1][1]*m[2][3] - m[0][1]*m[1][2]*m[2][3];
   				r[1][0] = m[1][3]*m[2][2]*m[3][0] - m[1][2]*m[2][3]*m[3][0] - m[1][3]*m[2][0]*m[3][2] + m[1][0]*m[2][3]*m[3][2] + m[1][2]*m[2][0]*m[3][3] - m[1][0]*m[2][2]*m[3][3];
   				r[1][1] = m[0][2]*m[2][3]*m[3][0] - m[0][3]*m[2][2]*m[3][0] + m[0][3]*m[2][0]*m[3][2] - m[0][0]*m[2][3]*m[3][2] - m[0][2]*m[2][0]*m[3][3] + m[0][0]*m[2][2]*m[3][3];
   				r[1][2] = m[0][3]*m[1][2]*m[3][0] - m[0][2]*m[1][3]*m[3][0] - m[0][3]*m[1][0]*m[3][2] + m[0][0]*m[1][3]*m[3][2] + m[0][2]*m[1][0]*m[3][3] - m[0][0]*m[1][2]*m[3][3];
   				r[1][3] = m[0][2]*m[1][3]*m[2][0] - m[0][3]*m[1][2]*m[2][0] + m[0][3]*m[1][0]*m[2][2] - m[0][0]*m[1][3]*m[2][2] - m[0][2]*m[1][0]*m[2][3] + m[0][0]*m[1][2]*m[2][3];
   				r[2][0] = m[1][1]*m[2][3]*m[3][0] - m[1][3]*m[2][1]*m[3][0] + m[1][3]*m[2][0]*m[3][1] - m[1][0]*m[2][3]*m[3][1] - m[1][1]*m[2][0]*m[3][3] + m[1][0]*m[2][1]*m[3][3];
   				r[2][1] = m[0][3]*m[2][1]*m[3][0] - m[0][1]*m[2][3]*m[3][0] - m[0][3]*m[2][0]*m[3][1] + m[0][0]*m[2][3]*m[3][1] + m[0][1]*m[2][0]*m[3][3] - m[0][0]*m[2][1]*m[3][3];
   				r[2][2] = m[0][1]*m[1][3]*m[3][0] - m[0][3]*m[1][1]*m[3][0] + m[0][3]*m[1][0]*m[3][1] - m[0][0]*m[1][3]*m[3][1] - m[0][1]*m[1][0]*m[3][3] + m[0][0]*m[1][1]*m[3][3];
   				r[2][3] = m[0][3]*m[1][1]*m[2][0] - m[0][1]*m[1][3]*m[2][0] - m[0][3]*m[1][0]*m[2][1] + m[0][0]*m[1][3]*m[2][1] + m[0][1]*m[1][0]*m[2][3] - m[0][0]*m[1][1]*m[2][3];
   				r[3][0] = m[1][2]*m[2][1]*m[3][0] - m[1][1]*m[2][2]*m[3][0] - m[1][2]*m[2][0]*m[3][1] + m[1][0]*m[2][2]*m[3][1] + m[1][1]*m[2][0]*m[3][2] - m[1][0]*m[2][1]*m[3][2];
   				r[3][1] = m[0][1]*m[2][2]*m[3][0] - m[0][2]*m[2][1]*m[3][0] + m[0][2]*m[2][0]*m[3][1] - m[0][0]*m[2][2]*m[3][1] - m[0][1]*m[2][0]*m[3][2] + m[0][0]*m[2][1]*m[3][2];
   				r[3][2] = m[0][2]*m[1][1]*m[3][0] - m[0][1]*m[1][2]*m[3][0] - m[0][2]*m[1][0]*m[3][1] + m[0][0]*m[1][2]*m[3][1] + m[0][1]*m[1][0]*m[3][2] - m[0][0]*m[1][1]*m[3][2];
   				r[3][3] = m[0][1]*m[1][2]*m[2][0] - m[0][2]*m[1][1]*m[2][0] + m[0][2]*m[1][0]*m[2][1] - m[0][0]*m[1][2]*m[2][1] - m[0][1]*m[1][0]*m[2][2] + m[0][0]*m[1][1]*m[2][2];
				
   				double d = det();
   				if(d == 0){
   					for (int i = 0; i < 4; ++i)
   						for(int j = 0; j < 4; ++j)
   							r[i][j] = std::numeric_limits<double>::infinity();
   				}else{
   					r = r * (1.0 / d); 
   				}

   				return r;
			}
	};

	inline Matrix4x4 T(Matrix4x4 & mat){
		return mat.T();
	}

	inline Matrix4x4 inv(Matrix4x4& m){
		return -m;
	}

	inline Matrix4x4 operator-(const Matrix4x4& m){
		return -m;
	}
}

#endif